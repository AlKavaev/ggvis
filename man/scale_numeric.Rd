% Generated by roxygen2 (4.0.1): do not edit by hand
\name{scale_numeric}
\alias{scale_numeric}
\title{Add a numeric scale to a ggvis object.}
\usage{
scale_numeric(vis, scale, domain = NULL, range = NULL, reverse = FALSE,
  round = FALSE, trans = "linear", clamp = FALSE, exponent = NULL,
  nice = TRUE, zero = FALSE, name = NULL)
}
\arguments{
\item{vis}{A ggvis object.}

\item{scale}{The name of a scale, such as "x", "y", "fill", "stroke", etc.}

\item{trans}{A scale transformation: one of "linear", "log", "pow", "sqrt",
"quantile", "quantize", "threshold"}

\item{exponent}{Sets the exponent of the scale transformation. For pow
transform only.}

\item{clamp}{If \code{TRUE}, values that exceed the data domain are clamped
to either the minimum or maximum range value.}

\item{nice}{If \code{TRUE}, modifies the scale domain to use a more
human-friendly number range (e.g., 7 instead of 6.96).}

\item{zero}{If \code{TRUE}, ensures that a zero baseline value is included
in the scale domain. This option is ignored for non-quantitative scales.}

\item{domain}{The domain of the scale, representing the set of data values.
For ordinal scales, a character vector; for quantitative scales, a numeric
vector of length two. Either value (but not both) may be NA, in which
case \code{domainMin} or \code{domainMax} is set.}

\item{range}{The range of the scale, representing the set of visual values.
For numeric values, the range can take the form of a two-element array with
minimum and maximum values. For ordinal data, the range may by an array of
desired output values, which are mapped to elements in the specified
domain. The following range literals are also available: "width", "height",
"shapes", "category10", "category20".}

\item{reverse}{If true, flips the scale range.}

\item{round}{If true, rounds numeric output values to integers. This can be
helpful for snapping to the pixel grid.}

\item{name}{name of the scale.}
}
\description{
A numeric (quantitative) scale controls the mapping of continuous variables
to visual properties.
}
\examples{
p <- mtcars \%>\% ggvis(~wt, ~mpg, fill = ~hp) \%>\% layer_points()

p \%>\% scale_numeric("y")

p \%>\% scale_numeric("y", trans = "pow", exp = 0.5)

p \%>\% scale_numeric("y", trans = "log")

# Can control other properties other than x and y
p \%>\% scale_numeric("fill", domain = c(0, 120), clamp = TRUE)

# Set range of data from 0 to 3
p \%>\% scale_numeric("x", domain = c(0, 3), clamp = TRUE, nice = FALSE)

# Lower bound is set to lower limit of data, upper bound set to 3.
p \%>\% scale_numeric("x", domain = c(NA, 3), clamp = TRUE, nice = FALSE)
}
\seealso{
\code{\link{scales}}, \code{\link{scale_ordinal}},
  \url{https://github.com/trifacta/vega/wiki/Scales#quantitative-scale-properties}

Other scales: \code{\link{scale_datetime}};
  \code{\link{scale_logical}}, \code{\link{scale_nominal}},
  \code{\link{scale_ordinal}}
}

