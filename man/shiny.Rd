% Generated by roxygen2 (4.0.0): do not edit by hand
\name{shiny}
\alias{ggvisOutput}
\alias{render_controls}
\alias{render_ggvis}
\alias{shiny}
\title{Connect a ggvis graphic to a shiny app.}
\usage{
ggvisOutput(plot_id, shiny = TRUE, minify = TRUE)

render_ggvis(vis, session, plot_id, controls_id = NULL, ...)

render_controls(vis, session, controls_id)
}
\arguments{
\item{plot_id}{unique identifier to use for the div containing the ggvis plot.}

\item{shiny}{Should this include headers for Shiny? For dynamic and
interactive plots, this should be TRUE; otherwise FALSE.}

\item{minify}{If \code{TRUE}, use minified version of JS and CSS files. This
can be useful for debugging.}

\item{vis}{A ggvis object, or a reactive expression that returns a ggvis
object.}

\item{session}{A Shiny session object.}

\item{...}{Other arguments passed to \code{as.vega}.}

\item{controls_id}{Unique identifier for controls div.}
}
\description{
Embedding ggvis in a shiny app is easy. You need to make a place for it in
your \code{ui.r} with \code{ggvisOutput}, and tell your \code{server.r}
where to draw it with \code{render_ggvis}. It's easiest to learn by example:
there are many shiny apps in \code{demo/apps/} that you can learn from.
}
\section{Client-side}{

In your UI, use \code{ggvisOutput()} in \code{ui.r} to insert an html
placeholder for the plot.

If you're going to be using interactive controls generated by ggvis,
use \code{\link[shiny]{renderUI}()} to add a place holder. By convention,
if the id of plot placehold is called "plot", call the controls placeholder
"plot_ui".
}

\section{Server-side}{

When you run ggvis plot interactively, it is automatically plotted because
it triggers the default print method. In shiny apps, you need to
explicitly render the plot to a specific placeholder with
\code{render_ggvis}:

\code{p \%>\% render_ggvis(session, "plot")}

If the plot has controls, and you've reserved space for them in the UI,
supply the name of the placeholder as the third argument:

\code{p \%>\% render_ggvis(session, "plot")}
}
\examples{
\dontest{
# Simplest possible app:
shiny::runApp(list(
  ui = bootstrapPage(
    ggvisOutput("p"),
    uiOutput("p_ui")
  ),
  server = function(..., session) {
    mtcars \%>\%
      ggvis(~wt, ~mpg) \%>\%
      layer_points() \%>\%
      layer_smooths(span = input_slider(0, 1)) \%>\%
      render_ggvis(session, "p", "p_ui")
  }
))
}
}

