% Generated by roxygen2 (4.0.0): do not edit by hand
\name{transform_bin}
\alias{layer_barchart}
\alias{layer_freqpoly}
\alias{layer_histogram}
\alias{transform_bin}
\title{Transformation: bin continuous variable.}
\usage{
transform_bin(vis, ..., binwidth = guess(), origin = NULL, right = TRUE)

layer_histogram(vis, ...)

layer_freqpoly(vis, ...)

layer_barchart(vis, ...)
}
\arguments{
\item{vis}{Visualisation to modify}

\item{...}{For \code{transform_bin}: ignored, all transforms must use
named arguments.  For \code{layer_histogram}: named arguments are
passed on to the transform, unnamed arguments are passed on to the layer.}
}
\description{
\code{transform_bin} is a data transformation that reduces a one-d vector
of positions to a data frame of binned counts. \code{layer_histogram}
combines \code{transform_bin} with \code{mark_rect} to create a histogram,
and \code{layer_freqpoly} combines \code{transform_bin} with
\code{mark_path} to create a frequency polygon.
}
\section{Input}{

Currently \code{transform_bin} only works with data frames and requires the
following properties:

\itemize{
  \item \code{x}, numeric, the values to bin and count
}
}
\examples{
# Create histograms and frequency polygons with layers
ggvis(mtcars, props(x = ~mpg), layer_histogram())
ggvis(mtcars, props(x = ~mpg), layer_histogram(binwidth = 2))
ggvis(mtcars, props(x = ~mpg), layer_freqpoly(binwidth = 2))

# These are equivalent to combining transform_bin with the corresponding
# mark
ggvis(mtcars, props(x = ~mpg), transform_bin(binwidth = 2),
  mark_rect(props(x = ~xmin__, x2 = ~xmax__, y = ~count__, y2 = 0)),
  mark_path(props(x = ~x, y = ~count__, stroke := "red", strokeWidth := 4))
)

# You can also combine other data transformations like splitting
ggvis(mtcars, props(x = ~mpg, stroke = ~cyl, strokeWidth := 4),
   by_group(cyl), layer_freqpoly(binwidth = 2))

# You can see the results of a transformation by creating your own pipeline
# and flowing data through it
sluice(pipeline(mtcars, transform_bin(2)), props(x = ~mpg))
sluice(pipeline(mtcars, by_group(cyl), transform_bin(2)), props(x = ~disp))
# Or
pl <- pipeline(mtcars, transform_bin(10))
sluice(pl, props(x = ~disp))
}

