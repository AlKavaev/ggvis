% Generated by roxygen2 (4.0.0): do not edit by hand
\name{create_keyboard_event}
\alias{create_keyboard_event}
\title{Event broker for keyboard events.}
\usage{
create_keyboard_event(map, default = NULL, id = rand_id())
}
\arguments{
\item{map}{A function which takes the key_press list object (a list}
}
\description{
The keyboard event broker is useful if you want your shiny app to respond
to keyboard events: \code{key_down}, \code{key_press} and \code{key_up}.
This returns a broker object, similar to \code{\link{create_input}}.
}
\details{
The \code{map} function takes a \code{key_press} list object which is
converted from the JSON object sent from the client, and the current value
of this reactive. Keyboard events differ from inputs in that when a key
is pressed, the new value can depend on the previous value. For example,
pressing the right arrow might increment the value each time. The value of
an input contrast, in contrast, takes the value directly from the client,
without using the previous value. The map function for keyboard events
therefore take the \code{current_value} as an argument.

The \code{map} function takes two arguments. The first is a list containing
an item named \code{value}, which is a string representation of the key that
was pressed. The second is the current value of the reactive.

The keyboard event handling in ggvis is implemented with
  \href{mousetrap}{http://craig.is/killing/mice}, so you can specify keys
  like \code{c("C", "Shift + X", "F2", "up"))}.

Also, unlike inputs, keyboard events add no HTML controls, but they do add
an object to insert into the Vega spec.
}

